name: Docker Image CI/CD

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  CACHE_SCOPE: global-cache
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set lowercase Image name
        id: set-image-name
        run: |
          # Convert repository name to lowercase and set as environment variable
          echo "IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host
          install: true
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: env.PLATFORMS != 'linux/amd64'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.PLATFORMS }}
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=${{ env.CACHE_SCOPE }}
          cache-to: type=gha,scope=${{ env.CACHE_SCOPE }},mode=max
          builder: ${{ steps.buildx.outputs.name }}

      - name: Inspect build cache
        if: always()
        run: |
          docker buildx du
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}