# Set global arguments
ARG BASE_OS="bitnami/minideb"
ARG OS_VERSION="bookworm"
ARG TL_VERSION="latest"
ARG _BUILD_CONTEXT_PREFIX=""

# Base OS stage
FROM ${BASE_OS}:${OS_VERSION} AS base

# Combine package installations + add missing Perl dependency
RUN install_packages \
    locales \
    wget \
    curl \
    ca-certificates \
    perl \
    libyaml-tiny-perl \
    libfile-homedir-perl \
    libunicode-linebreak-perl \
    # Add missing dependency for latexindent
    liblog-log4perl-perl \
    liblog-dispatch-perl \
    make \
    gettext-base \
    python3 \
    python3-pygments \
    git \
    # cannot use `default-jre-headless`, see https://github.com/alexpovel/latex-cookbook/issues/17
    default-jre \
    inkscape \
    gnuplot-nox \
    ghostscript \
    poppler-utils \
    librsvg2-bin \
    pandoc \
    cabextract && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
    # Minideb already cleans by default; remove remnants if any
    rm -rf /var/lib/apt/lists/*

# Set global encoding
ENV LANG=C.utf8 LC_ALL=C.utf8

# Download stage
FROM base AS downloads

ARG TL_VERSION
ARG _BUILD_CONTEXT_PREFIX

ARG TL_INSTALL_ARCHIVE="install-tl-unx.tar.gz"
ARG EISVOGEL_ARCHIVE="Eisvogel.tar.gz"
ARG INSTALL_TL_DIR="install-tl"

COPY ./${_BUILD_CONTEXT_PREFIX}/texlive.sh .

RUN \
    # Make texlive.sh executable: https://www.shells.com/l/en-US/tutorial/How-to-Fix-Shell-Script-Permission-Denied-Error-in-Linux
    chmod +x texlive.sh && \
    # Get appropriate installer for the TeXLive version to be installed:
    ./texlive.sh get_installer ${TL_VERSION} && \
    # Get Eisvogel LaTeX template for pandoc,
    # see also #175 in that repo.
    wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/latest/download/${EISVOGEL_ARCHIVE}
    
RUN \
    mkdir ${INSTALL_TL_DIR} && \
    # Save archive to predictable directory, in case its name ever changes; see
    # https://unix.stackexchange.com/a/11019/374985.
    # The archive comes with a name in the form of 'install-tl-YYYYMMDD' from the source,
    # which is of course unpredictable.
    tar --extract --file=${TL_INSTALL_ARCHIVE} --directory=${INSTALL_TL_DIR} --strip-components 1 && \
    \
    # Prepare Eisvogel pandoc template (yields `eisvogel.latex` among other things):
    # Update since 02.2025: The code is now packed in a directory, so we have to
    # strip the first directory level.
    tar --extract --file=${EISVOGEL_ARCHIVE} --strip-components=1

FROM base AS main

# Renew (https://stackoverflow.com/a/53682110):
ARG TL_VERSION
ARG _BUILD_CONTEXT_PREFIX

ARG TL_PROFILE="texlive.profile"
# Auxiliary, intermediate file:
ARG TMP_TL_PROFILE="${TL_PROFILE}.tmp"

# User to install and run LaTeX as.
# This is a security and convenience measure: by default, containers run as root.
# To work and compile PDFs using this container, you will need to map volumes into it
# from your host machine. Those bind-mounts will then be accessed as root from this
# container, and any generated files will also be owned by root. This is inconvenient at
# best and dangerous at worst.
# The generated user here will have IDs of 1000:1000. If your local user also has those
# (the case for single-user Debians etc.), your local user will already have correct
# ownership of all files generated by the user we create here.
ARG USER="tex"
RUN useradd --create-home ${USER}

# Label according to http://label-schema.org/rc1/ to have some metadata in the image.
# This is important e.g. to know *when* an image was built. Depending on that, it can
# contain different software versions (even if the base image is specified as a fixed
# version).

LABEL maintainer="Wyatt Au <wyatt_au@protonmail.com>" \
      org.label-schema.description="OmniLaTeX required tooling" \
      org.label-schema.vcs-url="https://github.com/WyattAu/OmniLaTeX-docker"

ARG INSTALL_DIR="/install"
WORKDIR ${INSTALL_DIR}

# Copy custom file containing TeXLive installation instructions
COPY ${_BUILD_CONTEXT_PREFIX}/config/${TL_PROFILE} ${TMP_TL_PROFILE}
COPY --from=downloads /install-tl/ /texlive.sh ./

# Move to where pandoc looks for templates, see https://pandoc.org/MANUAL.html#option--data-dir
COPY --from=downloads /eisvogel.latex /home/${USER}/.pandoc/templates/

# Global wget config file, see the comments in that file for more info and the rationale.
# Location of that file depends on system, e.g.: https://askubuntu.com/a/368050
COPY ${_BUILD_CONTEXT_PREFIX}/config/.wgetrc /etc/wgetrc

# "In-place" `envsubst` run is a bit more involved, see also:
# https://stackoverflow.com/q/35078753/11477374.
# Do not use `mktemp`, will break Docker caching since it's a new file each time.
RUN cat "$TMP_TL_PROFILE" | envsubst | tee "$TL_PROFILE" && \
    rm "$TMP_TL_PROFILE"

# (Large) LaTeX layer
RUN ./texlive.sh install "$TL_VERSION"

# Remove no longer needed installation workdir.
# Cannot run this earlier because it would be recreated for any succeeding `RUN`
# instructions.
# Therefore, change `WORKDIR` first, then delete the old one.
WORKDIR /${USER}

USER ${USER}

# Load font cache, has to be done on each compilation otherwise
# ("luaotfload | db : Font names database not found, generating new one.").
# If not found, e.g. TeXLive 2012 and earlier, simply skip it. Will return exit code
# 0 and allow the build to continue.
# Warning: This is USER-specific. If the current `USER` for which we run this is not
# the container user, the font will be regenerated for that new user.
RUN luaotfload-tool --update || echo "luaotfload-tool did not succeed, skipping."

USER root
# Give back control to own user files; might be root-owned from previous copying processes
RUN chown --recursive ${USER}:${USER} /home/${USER}/
# Make our class file available for the entire latex/TeXLive installation, see also
# https://tex.stackexchange.com/a/1138/120853
# Download the acp.cls from the ITT LaTeX template to the right destination
RUN wget -P /home/${USER}/texmf/tex/latex/ https://collaborating.tuhh.de/m21/public/theses/itt-latex-template/-/raw/master/acp.cls
# COPY acp.cls /home/${USER}/texmf/tex/latex/
USER ${USER}

# The default parameters to the entrypoint; overridden if any arguments are given to
# `docker run`.
# `lualatex` usage for `latexmk` implies PDF generation, otherwise DVI is generated.
CMD [ "--lualatex" ]

# Allow container to run as an executable; override with `--entrypoint`.
# Allows to simply `run` the image without specifying any executable.
# If `latexmk` is called without a file argument, it will run on all *.tex files found.
ENTRYPOINT [ "latexmk" ]
